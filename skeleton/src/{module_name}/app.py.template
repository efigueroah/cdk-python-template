#!/usr/bin/env python3
"""
Punto de Entrada de la Aplicaci√≥n AWS CDK
Configuraci√≥n centralizada usando hg_aws_helpers
"""

import os

from aws_cdk import App, Environment
from cdk_nag import AwsSolutionsChecks

from .config import get_project_config

# Importa tus stacks aqu√≠
# from .stacks.network_stack import NetworkStack
# from .stacks.compute_stack import ComputeStack


def main():
    """Punto de entrada principal de la aplicaci√≥n"""
    app = App()
    
    # Obtener ambiente desde contexto o variable de ambiente
    env_name = app.node.try_get_context("environment") or os.getenv("CDK_ENVIRONMENT", "dev")
    
    # Cargar configuraci√≥n usando hg_aws_helpers
    project_config = get_project_config(env_name)
    config = project_config.config
    
    print(f"üöÄ Iniciando aplicaci√≥n CDK para ambiente: {env_name}")
    print(f"üìã Proyecto: {config.project.name}")
    print(f"‚òÅÔ∏è  Cuenta AWS: {config.aws.account}")
    print(f"üåç Regi√≥n: {config.aws.region}")
    
    # Definir ambiente AWS
    aws_env = Environment(
        account=config.aws.get('account', config.aws.get('account_id')),
        region=config.aws.region
    )
    
    # Crear stacks usando configuraci√≥n centralizada
    # Ejemplo:
    # network_stack = NetworkStack(
    #     app, project_config.get_stack_name("network"),
    #     config=config,
    #     env=aws_env,
    #     description=f"Stack de red para {config.project.name} en {env_name}"
    # )
    
    # compute_stack = ComputeStack(
    #     app, project_config.get_stack_name("compute"),
    #     config=config,
    #     env=aws_env,
    #     description=f"Stack de c√≥mputo para {config.project.name} en {env_name}"
    # )
    # compute_stack.add_dependency(network_stack)
    
    # Aplicar CDK Nag para validaci√≥n de seguridad y mejores pr√°cticas
    if os.getenv("ENABLE_CDK_NAG", "true").lower() == "true":
        print("üîí Aplicando validaciones CDK Nag...")
        AwsSolutionsChecks(app, verbose=True)
    
    # Exportar configuraci√≥n al contexto de CDK si es necesario
    if os.getenv("EXPORT_CONFIG_TO_CDK", "false").lower() == "true":
        project_config.export_to_cdk_context()
    
    # Sintetizar aplicaci√≥n
    app.synth()
    
    print(f"‚úÖ Aplicaci√≥n CDK sintetizada exitosamente para {env_name}")


if __name__ == "__main__":
    main()
