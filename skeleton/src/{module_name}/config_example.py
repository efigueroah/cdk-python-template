#!/usr/bin/env python3
"""
Ejemplo de uso de la configuraci√≥n centralizada con hg_aws_helpers
"""

from .config import get_project_config, create_sample_config_files


def demo_configuration_usage():
    """Demostrar el uso de la configuraci√≥n centralizada"""
    
    print("üîß === Demo de Configuraci√≥n Centralizada con hg_aws_helpers ===\n")
    
    # 1. Crear archivos de configuraci√≥n de ejemplo
    print("üìù 1. Creando archivos de configuraci√≥n de ejemplo...")
    create_sample_config_files("dev")
    
    # 2. Cargar configuraci√≥n para desarrollo
    print("\nüîß 2. Cargando configuraci√≥n para desarrollo:")
    dev_config = get_project_config("dev")
    config = dev_config.config
    
    print(f"   ‚Ä¢ Proyecto: {config.project.name}")
    print(f"   ‚Ä¢ Ambiente: {config.project.environment}")
    print(f"   ‚Ä¢ Cuenta AWS: {config.aws.get('account', config.aws.get('account_id'))}")
    print(f"   ‚Ä¢ Regi√≥n: {config.aws.region}")
    
    # 3. Demostrar acceso a configuraci√≥n de red
    print("\nüåê 3. Configuraci√≥n de red:")
    print(f"   ‚Ä¢ VPC CIDR: {config.network.vpc_cidr}")
    print(f"   ‚Ä¢ NAT Gateways: {config.network.nat_gateways}")
    print(f"   ‚Ä¢ Subnets p√∫blicas: {config.network.get('public_subnets', 'No definidas')}")
    
    # 4. Demostrar configuraci√≥n de c√≥mputo
    print("\nüíª 4. Configuraci√≥n de c√≥mputo:")
    instance_types = config.compute.get('instance_types', {})
    print(f"   ‚Ä¢ Instancia peque√±a: {instance_types.get('small', 'No definida')}")
    print(f"   ‚Ä¢ Instancia mediana: {instance_types.get('medium', 'No definida')}")
    print(f"   ‚Ä¢ Instancia grande: {instance_types.get('large', 'No definida')}")
    
    # 5. Demostrar configuraci√≥n de base de datos
    print("\nüóÑÔ∏è  5. Configuraci√≥n de base de datos:")
    print(f"   ‚Ä¢ Clase de instancia: {config.database.instance_class}")
    print(f"   ‚Ä¢ Almacenamiento: {config.database.allocated_storage} GB")
    print(f"   ‚Ä¢ Retenci√≥n de backup: {config.database.backup_retention_days} d√≠as")
    print(f"   ‚Ä¢ Multi-AZ: {config.database.get('multi_az', False)}")
    
    # 6. Demostrar generaci√≥n de nombres
    print("\nüè∑Ô∏è  6. Generaci√≥n de nombres estandarizados:")
    print(f"   ‚Ä¢ Nombre de recurso S3: {dev_config.get_resource_name('data-bucket')}")
    print(f"   ‚Ä¢ Nombre de stack de red: {dev_config.get_stack_name('network')}")
    print(f"   ‚Ä¢ Nombre de stack de API: {dev_config.get_stack_name('api')}")
    
    # 7. Demostrar tags
    print("\nüè∑Ô∏è  7. Tags del proyecto:")
    tags = config.tags.to_dict() if hasattr(config.tags, 'to_dict') else config.tags
    for key, value in tags.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    # 8. Comparar con configuraci√≥n de producci√≥n
    print("\nüöÄ 8. Comparaci√≥n con configuraci√≥n de producci√≥n:")
    prod_config = get_project_config("prod")
    prod_config_obj = prod_config.config
    
    print("   Diferencias clave:")
    print(f"   ‚Ä¢ NAT Gateways - Dev: {config.network.nat_gateways}, Prod: {prod_config_obj.network.nat_gateways}")
    print(f"   ‚Ä¢ DB Multi-AZ - Dev: {config.database.get('multi_az', False)}, Prod: {prod_config_obj.database.get('multi_az', False)}")
    print(f"   ‚Ä¢ Monitoreo detallado - Dev: {config.monitoring.detailed_monitoring}, Prod: {prod_config_obj.monitoring.detailed_monitoring}")
    
    # 9. Demostrar exportaci√≥n a CDK context
    print("\nüì§ 9. Exportaci√≥n a CDK context:")
    try:
        dev_config.export_to_cdk_context()
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Nota: {e}")
        print("   üí° Esto funcionar√° cuando existan archivos de configuraci√≥n externos")
    
    print("\n‚úÖ Demo completado exitosamente!")
    print("\nüí° Pr√≥ximos pasos:")
    print("   1. Edita los archivos config/base.toml y config/env.dev.toml")
    print("   2. Personaliza la configuraci√≥n seg√∫n tus necesidades")
    print("   3. Usa config.network.vpc_cidr en lugar de config['vpc_cidr']")
    print("   4. Aprovecha el acceso por atributos para c√≥digo m√°s limpio")


def demo_stack_integration():
    """Demostrar c√≥mo integrar la configuraci√≥n en stacks CDK"""
    
    print("\nüèóÔ∏è  === Demo de Integraci√≥n con Stacks CDK ===\n")
    
    # Ejemplo de c√≥mo usar la configuraci√≥n en un stack
    config = get_project_config("dev").config
    
    print("üìã Ejemplo de uso en NetworkStack:")
    print(f"""
from aws_cdk import Stack, aws_ec2 as ec2
from .config import get_project_config

class NetworkStack(Stack):
    def __init__(self, scope, construct_id, **kwargs):
        super().__init__(scope, construct_id, **kwargs)
        
        # Cargar configuraci√≥n
        project_config = get_project_config(self.environment)
        config = project_config.config
        
        # Crear VPC usando configuraci√≥n
        self.vpc = ec2.Vpc(
            self, "VPC",
            cidr=config.network.vpc_cidr,
            max_azs=len(config.network.get('availability_zones', [])),
            nat_gateways=config.network.nat_gateways,
            subnet_configuration=[
                ec2.SubnetConfiguration(
                    name="Public",
                    subnet_type=ec2.SubnetType.PUBLIC,
                    cidr_mask=24
                ),
                ec2.SubnetConfiguration(
                    name="Private",
                    subnet_type=ec2.SubnetType.PRIVATE_WITH_EGRESS,
                    cidr_mask=24
                )
            ]
        )
        
        # Aplicar tags desde configuraci√≥n
        for key, value in config.tags.to_dict().items():
            self.vpc.node.add_metadata(key, value)
""")
    
    print("üìã Par√°metros que se usar√≠an:")
    print(f"   ‚Ä¢ VPC CIDR: {config.network.vpc_cidr}")
    print(f"   ‚Ä¢ NAT Gateways: {config.network.nat_gateways}")
    print(f"   ‚Ä¢ Zonas de disponibilidad: {config.network.get('availability_zones', 'Auto-detectar')}")


if __name__ == "__main__":
    demo_configuration_usage()
    demo_stack_integration()
