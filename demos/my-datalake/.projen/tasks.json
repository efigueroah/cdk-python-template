{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "python .projenrc.py"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "description": "Deploys your CDK app to the AWS cloud",
      "steps": [
        {
          "exec": "cdk deploy",
          "receiveArgs": true
        }
      ]
    },
    "deploy:env": {
      "name": "deploy:env",
      "description": "Deploy CDK app to specific environment",
      "steps": [
        {
          "exec": "cdk deploy --context environment=${ENV:-dev} --require-approval never"
        }
      ]
    },
    "destroy": {
      "name": "destroy",
      "description": "Destroys your cdk app in the AWS cloud",
      "steps": [
        {
          "exec": "cdk destroy",
          "receiveArgs": true
        }
      ]
    },
    "destroy:env": {
      "name": "destroy:env",
      "description": "Destroy CDK app from specific environment",
      "steps": [
        {
          "exec": "cdk destroy --context environment=${ENV:-dev} --force"
        }
      ]
    },
    "diff": {
      "name": "diff",
      "description": "Diffs the currently deployed app against your code",
      "steps": [
        {
          "exec": "cdk diff"
        }
      ]
    },
    "diff:env": {
      "name": "diff:env",
      "description": "Show diff for specific environment",
      "steps": [
        {
          "exec": "cdk diff --context environment=${ENV:-dev}"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "format": {
      "name": "format",
      "description": "Format code with black and isort",
      "steps": [
        {
          "exec": "black ."
        },
        {
          "exec": "isort ."
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install and upgrade dependencies",
      "steps": [
        {
          "exec": "python -m pip install --upgrade pip"
        },
        {
          "exec": "pip install -r requirements.txt"
        },
        {
          "exec": "pip install -r requirements-dev.txt"
        }
      ]
    },
    "lint": {
      "name": "lint",
      "description": "Run linting checks",
      "steps": [
        {
          "exec": "flake8 ."
        },
        {
          "exec": "mypy ."
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "synth:silent"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "synth": {
      "name": "synth",
      "description": "Synthesizes your cdk app into cdk.out",
      "steps": [
        {
          "exec": "cdk synth"
        }
      ]
    },
    "synth:env": {
      "name": "synth:env",
      "description": "Synthesize CDK app for specific environment",
      "steps": [
        {
          "exec": "cdk synth --context environment=${ENV:-dev}"
        }
      ]
    },
    "synth:silent": {
      "name": "synth:silent",
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \"yarn build\")",
      "steps": [
        {
          "exec": "cdk synth -q"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "pytest tests/**/*_test.py tests/**/test_*.py"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "steps": [
        {
          "exec": "cdk deploy --hotswap"
        },
        {
          "exec": "cdk watch"
        }
      ]
    }
  },
  "env": {
    "VIRTUAL_ENV": "$(python -c \"import os; print('{0}/.env'.format(os.getcwd()))\")",
    "PATH": "$(python -c \"import os, sys; python_dir = 'Scripts' if sys.platform == 'win32' else 'bin'; print('{0}/.env/{1}{2}{3}'.format(os.getcwd(), python_dir, os.pathsep, os.environ['PATH']))\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.py and run \"npx projen\"."
}
